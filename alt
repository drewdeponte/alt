#!/usr/bin/env bash
# vim: set ft=ruby:

# This file executes as a bash script, which turns around and executes Ruby via
# the line below. The -x argument to Ruby makes it discard everything before
# the second "!ruby" shebang. This allows us to work on Linux, where the
# shebang can only have one argument so we can't directly say
# "#!/usr/bin/env ruby --disable-gems". Thanks for that, Linux.
#
# If this seems confusing, don't worry. You can treat it as a normal Ruby file
# starting with the "!ruby" shebang below.

exec /usr/bin/env ruby --disable-gems -x "$0" $*
#!ruby

if RUBY_VERSION < '1.9.3'
  abort 'error: Alt requires Ruby 1.9.3 or higher'
end

require 'optparse'

MIN_CONFIDENCE_THRESHOLD = 0.75
MIN_FILENAME_PERCENTAGE = 0.50
FINAL_MATCH_CONFIDENCE_THRESHOLD = 0.90

class Path < String
  def intialize(path)
    super(path.dup)
    cleanse_path
  end

  def test_file?
    self.start_with?('features/','test/', 'spec/')
  end

  private

  def cleanse_path
    self.gsub!(/^\.\//, '')
  end
end

class Alt
  VERSION='0.0.1'

  def initialize(argv: ARGV)
    @argv = argv
    @path = nil
    @options = { version: false, stdin: false, debug: false }
    parse_options
    parse_args
  end

  def main
    display_version and exit 0 if @options[:version]

    puts read_possible_files_from_stdin.inspect and exit 0 if @options[:stdin]

    original_path = @argv[0].dup
    original_path.gsub!(/^\.\//, '')

    filename = nil
    orig_filename = nil
    sorted_matches = []

    filename = get_filename_minus_extension(original_path)

    filename = strip_test_words(filename) if test_file?(original_path)

    debug "filename" do
      orig_filename = filename.dup
    end

    debug "sorted_matches after find_matches" do
      sorted_matches = find_matches(filename, original_path)
    end

    debug "sorted_matches after find_match_with_min_confidence" do
      sorted_matches = find_match_with_min_confidence(filename, original_path, sorted_matches)
    end

    debug "sorted_matches after find_best_match" do
      sorted_matches = find_best_match(sorted_matches)
    end

    debug "sorted_matches after trim_results" do
      sorted_matches = trim_results(sorted_matches)
    end

    if sorted_matches.empty?
      $stdout.write('')
    else
      $stdout.write(sorted_matches.first.ref_path)
    end

    return 0
  end

  private

  def debug(description, &block)
    result = block.call
    if @options[:debug]
      if result.is_a?(Array)
        puts "#{description}:"
        result.each do |item|
          if item.is_a?(Match)
            puts "%.20f : #{item.original_path.gsub('%', '')} - #{item.filename} - #{item.ref_path.gsub('%', '')} (#{item.path.gsub('%', '')})" % item.score
          else
            puts item.inspect
          end
        end
      else
        puts "#{description}: #{result.inspect}"
      end
      puts
    end
  end

  def parse_options
    OptionParser.new do |opts|
      opts.banner = "Usage: alt [options] <path>"

      opts.on('-v', '--version', 'Display version') do
        @options[:version] = true
      end

      opts.on('-d', '--debug', 'Debug mode') do
        @options[:debug] = true
      end

      opts.on('--', '--', 'Use stdin as possible files') do
        @options[:stdin] = true
      end
    end.parse!
  end

  def parse_args
    @path = Path.new(@argv[0]) if @argv.length > 0
  end

  def display_version
    $stdout.write("act v#{Alt::VERSION}\n")
  end

  def read_possible_files_from_stdin
    $stdin.readlines
  end
end

# Judge
#
# The judge exists to help score a potential match given a query
#
# @since 0.0.2
class Judge

  # Score a string against a query#
  #
  # @return [Float] between 0 and 1
  def self.score(query, str)
    longest_match = find_longest_common_substring(query, str)
    return longest_match.length.to_f/str.length.to_f
  end

  private

  def self.find_longest_common_substring(s1, s2)
    if (s1 == "" || s2 == "")
      return ""
    end
    m = Array.new(s1.length){ [0] * s2.length }
    longest_length, longest_end_pos = 0,0
    (0 .. s1.length - 1).each do |x|
      (0 .. s2.length - 1).each do |y|
        if s1[x] == s2[y]
          m[x][y] = 1
          if (x > 0 && y > 0)
            m[x][y] += m[x-1][y-1]
          end
          if m[x][y] > longest_length
            longest_length = m[x][y]
            longest_end_pos = x
          end
        end
      end
    end
    return s1[longest_end_pos - longest_length + 1 .. longest_end_pos]
  end
end

class Match
  attr_reader :path, :ref_path, :original_path, :filename

  def initialize(original_path, filename, path)
    @original_path = original_path
    @filename = filename
    @ref_path = path
    @path = path.dup
  end

  def reduce_path
    @path = @path[1..-2] if @path.size > 1
  end

  def clean_path(path)
    return path.gsub(/^(feature|spec|test)\//, '').gsub(/(_spec|_test|_steps)/, '')
  end

  def score
    return Judge.score(clean_path(@original_path), clean_path(@path))
  end
end

def test_file?(original_path)
  original_path.start_with?('features/','test/', 'spec/')
end

def find_matches(filename, original_path)
  raw_matches = []
  if test_file?(original_path)
    Dir.glob('*/').each do |dir|
      next if %w[features/ test/ spec/].include?(dir)
      raw_matches.concat Dir.glob("#{dir}**/*#{filename}*.rb")
    end
  else
    raw_matches = Dir.glob("{features,test,spec}/**/*#{filename}*.rb")
  end

  matches = raw_matches.map { |path| Match.new(original_path, filename, path) }
  return matches.sort { |x,y| y.score <=> x.score }
end

def get_filename_minus_extension(path)
  File.basename(path, ".*") # filename without extension
end

def find_match_with_min_confidence(filename, original_path, sorted_matches)
  cur_filename = filename.dup
  while ((sorted_matches.empty? || sorted_matches.first.score < MIN_CONFIDENCE_THRESHOLD) && (cur_filename.length > filename.length * MIN_FILENAME_PERCENTAGE))
    cur_filename = cur_filename[0..-2]
    cur_filename.gsub!(/_$/, '')
    sorted_matches = find_matches(cur_filename, original_path)
  end
  return sorted_matches
end

def find_best_match(sorted_matches)
  while ((!sorted_matches.empty?) && sorted_matches.first.score < FINAL_MATCH_CONFIDENCE_THRESHOLD && sorted_matches.first.path.length > sorted_matches.first.ref_path.length * MIN_FILENAME_PERCENTAGE)
    sorted_matches.each { |match| match.reduce_path }
    sorted_matches = sorted_matches.sort { |x,y| y.score <=> x.score }
  end
  return sorted_matches
end

def trim_results(sorted_matches)
  sorted_matches.delete_if { |m| m.score < FINAL_MATCH_CONFIDENCE_THRESHOLD }
  sorted_matches
end

def strip_test_words(filename)
  filename.gsub(/(_spec|_test|_steps)(\.rb)?$/, '')
end


if $0 == __FILE__
  exit Alt.new.main
end
