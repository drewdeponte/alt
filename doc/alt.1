.TH ALT 1
.SH NAME
alt \- find the "alternate paths" for the given path
.SH SYNOPSIS
.B alt
[OPTIONS] PATH
.SH DESCRIPTION
.B alt
finds alternate file paths for the given PATH based on a similarity ranking. For example, if you were in a Ruby project and ran
.B alt
.IR spec/app/queues/fee/user_fee_submission_spec.rb
the output would include ranked at the top
.IR app/queues/fee/user_fee_submission.rb.
In this case the alternate for the test file is the implementation file.
.B alt
by default outputs all possible alternate paths in ranked order. Originally the
behavior was to only output the highest ranked file path. To retain this
behavior simply use the truncate option with a value of 1.
.SH OPTIONS
.TP
.BR \-v ", " \-\-version
Output the version of \fBalt\fR
.TP
.BR \-t ", " \-\-truncate " " TRUNCATE
Truncate the output to a specified number of alternates. (default: 0 - do not truncate)
.TP
.BR \-\-filename\-weight " " WEIGHT
Override the default weight of filenames in the scoring algorithm (default: 10.0)
.TP
.BR \-\-path\-weight " " WEIGHT
Override the default weight of paths in the scoring algorithm (default: 1.0)
.TP
.BR \-h ", " \-\-help
Output the usage help
.TP
.BR \-a
Include directory entries whose names begin with a dot
.TP
.BR \-j
Use threads to do similarity scoring in parallel (default: false)
.TP
.BR "\fB\-f\fR \fIfile\fR, \fB\-\-file\fR \fIfile\fR"
Read possible alternates from a \fIfile\fR rather than using the default
directory walk technique built into \fBalt\fR. If \fIfile\fR is "-" it will read
the possible alternates from \fIstdin\fR. The following is an example of using
find, a very common command line utility, to produce a filtered set of paths and
pass them to \fBalt\fR:

    find . -path tags -prune -or -path ./log -prune -or -type f -print | alt -f - spec/lib/foo/api_spec.rb

In the above example it excludes tags and log file paths from the possible
alternate paths and passes the rest into \fBalt\fR. \fBNote:\fR This example is
less performant than the built in directory walk technique and it's filtering.
It is simply an example of how you can pass output from one command line tool to
alt as input.
.SH USE WITH NEOVIM
There's no NeoVim or Vim plugin. It may not end up needing one; we will see. The
snippet below is a basic setup I use in my NeoVim to tie \fBalt\fR into
\fBtelescope\fR so that I can fuzzy select the ranked alternate paths. For now,
you can just stick the code below in your \fIinit.lua\fR to invoke \fBalt\fR
with \fI<leader>\fR. Note that \fBalt\fR and the NeoVim Lua example below work
in both the terminal based NeoVim and GUI based NeoVim.

    -- ----------------------------------------------
    -- Alternate File Switching
    -- ----------------------------------------------
    function alt(path)
      local function isempty(s)
        return s == nil or s == ''
      end

      local alternates = vim.fn.system("alt " .. path)
      -- check the exit status code to see if failure and return nil
      if isempty(alternates) then
        return nil
      else
        local alternates_table = {}
        for s in alternates:gmatch("[^\\r\\n]+") do
          table.insert(alternates_table, s)
        end
        return alternates_table
      end
    end

    function alt_command(path, alt_handler)
      local alternate_file_paths = alt(path)
      if alternate_file_paths == nil then
        print("No alternate files found for " .. path .. "!")
      else
        alt_handler(path, alternate_file_paths)
      end
    end

    -- ----------------------------------------------
    -- Telescope Selection of Alternates
    -- ----------------------------------------------

    local pickers = require "telescope.pickers"
    local finders = require "telescope.finders"
    local sorters = require "telescope.sorters"

    local alternates_picker = function(alternates, opts)
      opts = opts or {}
      pickers.new(opts, {
        prompt_title = "alternates",
        finder = finders.new_table {
          results = alternates
        },
        sorter = sorters.fuzzy_with_index_bias(opts),
      }):find()
    end

    function alt_telescope_handler(current_file_path, alternate_file_paths)
      -- vim.cmd('w')
      -- vim.cmd('e ' .. alternate_file_path)
      alternates_picker(alternate_file_paths)
    end

    -- ----------------------------------------------
    -- Personal Key Bindings
    -- ----------------------------------------------

    vim.keymap.set('n', '<leader>.', function()
      alt_command(vim.fn.expand('%'), alt_telescope_handler)
    end)

.SH IGNORING THINGS
\fBalt\fR by default ignores hidden directory entries, globs defined in a
\fB.ignore\fR file and globs defined in your project's \fB.gitignore\fR and your
global \fB.gitignore\fR. It does this because in our experience that is
generally the behavior you want. If however you want for example to be able to
alternate between hidden files for some reason, you can always use the \-a
option. If you want to have \fBalt\fR ignore some specific paths/files that you
don't want Git to ignore. You can simply define them in the \fB.ignore\fR file
at the root of your project.

.SH AUTHOR
Drew De Ponte <cyphactor@gmail.com>
.SH COPYRIGHT
Copyright (c) 2016-2023 UpTech Works, LLC

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
